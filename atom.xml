<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Geehon</title>
  
  <subtitle>Developer、Geehon的博客、PHP、JavaScript、laravel、yii2、Web、html、HTML</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://geehon.github.io/"/>
  <updated>2019-01-24T11:20:51.856Z</updated>
  <id>https://geehon.github.io/</id>
  
  <author>
    <name>Geehon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于如何判断客户端类型</title>
    <link href="https://geehon.github.io/post/512841c.html"/>
    <id>https://geehon.github.io/post/512841c.html</id>
    <published>2019-01-24T11:18:37.000Z</published>
    <updated>2019-01-24T11:20:51.856Z</updated>
    
    <content type="html"><![CDATA[<p>开发应用有时候会涉及到针对不同的访问类型提供不同的业务处理。以下是分别使用JavaScript和PHP进行判断的简单介绍。</p><h3 id="使用JavaScript判断"><a href="#使用JavaScript判断" class="headerlink" title="使用JavaScript判断"></a>使用JavaScript判断</h3><p>首先来了解一下<code>Navigator</code> 对象，<code>Navigator</code>对象包含有关浏览器的信息，通过该对象的属性可以判断访问的客户端类型。<code>Navigator</code>具体有哪些属性可以访问<a href="http://www.w3school.com.cn/jsref/dom_obj_navigator.asp" target="_blank" rel="noopener">Navigator属性</a></p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><ul><li><code>userAgent</code>属性：使用正则表达式判断<code>navigator.userAgent</code>的信息。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined">  </span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">browserRedirect</span>(<span class="params"></span>) </span>&#123; </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> sUserAgent = navigator.userAgent.toLowerCase();  </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> bIsIpad = sUserAgent.match(<span class="regexp">/ipad/i</span>) == <span class="string">"ipad"</span>;  </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> bIsIphoneOs = sUserAgent.match(<span class="regexp">/iphone os/i</span>) == <span class="string">"iphone os"</span>;  </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> bIsMidp = sUserAgent.match(<span class="regexp">/midp/i</span>) == <span class="string">"midp"</span>;  </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> bIsUc7 = sUserAgent.match(<span class="regexp">/rv:1.2.3.4/i</span>) == <span class="string">"rv:1.2.3.4"</span>;  </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> bIsUc = sUserAgent.match(<span class="regexp">/ucweb/i</span>) == <span class="string">"ucweb"</span>;  </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> bIsAndroid = sUserAgent.match(<span class="regexp">/android/i</span>) == <span class="string">"android"</span>;  </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> bIsCE = sUserAgent.match(<span class="regexp">/windows ce/i</span>) == <span class="string">"windows ce"</span>;  </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> bIsWM = sUserAgent.match(<span class="regexp">/windows mobile/i</span>) == <span class="string">"windows mobile"</span>;  </span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (!(bIsIpad || bIsIphoneOs || bIsMidp || bIsUc7 || bIsUc || bIsAndroid || bIsCE || bIsWM) ) &#123;</span></span><br><span class="line"><span class="javascript">       <span class="comment">// 跳转到A页面</span></span></span><br><span class="line"><span class="javascript">       <span class="built_in">window</span>.location.href=<span class="string">"A页面"</span>;</span></span><br><span class="line"><span class="undefined">  &#125;        </span></span><br><span class="line"><span class="undefined">&#125;  </span></span><br><span class="line"><span class="undefined">    browserRedirect();          </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用PHP判断"><a href="#使用PHP判断" class="headerlink" title="使用PHP判断"></a>使用PHP判断</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>具体原理是利用<code>$_SERVER[ ]</code>这个数组。客户端对应用进行访问的时候<code>$_SERVER[ ]</code>会携带客户端类型的相关信息，具体的在代码注释里有详细说明。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/* 查看是否为手机端的方法</span></span><br><span class="line"><span class="comment"> * 判断是手机访问还是是电脑访问</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMobile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果有HTTP_X_WAP_PROFILE则一定是移动设备</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span> ($_SERVER[<span class="string">'HTTP_X_WAP_PROFILE'</span>]))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//此条摘自TPM智能切换模板引擎，适合TPM开发</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span> ($_SERVER[<span class="string">'HTTP_CLIENT'</span>]) &amp;&amp;<span class="string">'PhoneClient'</span>==$_SERVER[<span class="string">'HTTP_CLIENT'</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">//如果via信息含有wap则一定是移动设备,部分服务商会屏蔽该信息</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span> ($_SERVER[<span class="string">'HTTP_VIA'</span>]))</span><br><span class="line">        <span class="comment">//找不到为flase,否则为true</span></span><br><span class="line">        <span class="keyword">return</span> stristr($_SERVER[<span class="string">'HTTP_VIA'</span>], <span class="string">'wap'</span>) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//判断手机发送的客户端标志,兼容性有待提高</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span> ($_SERVER[<span class="string">'HTTP_USER_AGENT'</span>])) &#123;</span><br><span class="line">        $clientkeywords = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'nokia'</span>,<span class="string">'sony'</span>,<span class="string">'ericsson'</span>,<span class="string">'mot'</span>,<span class="string">'samsung'</span>,<span class="string">'htc'</span>,<span class="string">'sgh'</span>,<span class="string">'lg'</span>,<span class="string">'sharp'</span>,<span class="string">'sie-'</span>,<span class="string">'philips'</span>,<span class="string">'panasonic'</span>,<span class="string">'alcatel'</span>,<span class="string">'lenovo'</span>,<span class="string">'iphone'</span>,<span class="string">'ipod'</span>,<span class="string">'blackberry'</span>,<span class="string">'meizu'</span>,<span class="string">'android'</span>,<span class="string">'netfront'</span>,<span class="string">'symbian'</span>,<span class="string">'ucweb'</span>,<span class="string">'windowsce'</span>,<span class="string">'palm'</span>,<span class="string">'operamini'</span>,<span class="string">'operamobi'</span>,<span class="string">'openwave'</span>,<span class="string">'nexusone'</span>,<span class="string">'cldc'</span>,<span class="string">'midp'</span>,<span class="string">'wap'</span>,<span class="string">'mobile'</span></span><br><span class="line">        );</span><br><span class="line">        <span class="comment">//使用正则从HTTP_USER_AGENT中查找手机浏览器的关键字</span></span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">"/("</span> . implode(<span class="string">'|'</span>, $clientkeywords) . <span class="string">")/i"</span>, strtolower($_SERVER[<span class="string">'HTTP_USER_AGENT'</span>]))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//协议法，因为有可能不准确，放到最后判断</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span> ($_SERVER[<span class="string">'HTTP_ACCEPT'</span>])) &#123;</span><br><span class="line">        <span class="comment">// 如果只支持wml并且不支持html那一定是移动设备</span></span><br><span class="line">        <span class="comment">// 如果支持wml和html但是wml在html之前则是移动设备</span></span><br><span class="line">        <span class="keyword">if</span> ((strpos($_SERVER[<span class="string">'HTTP_ACCEPT'</span>], <span class="string">'vnd.wap.wml'</span>) !== <span class="keyword">false</span>) &amp;&amp; (strpos($_SERVER[<span class="string">'HTTP_ACCEPT'</span>], <span class="string">'text/html'</span>) === <span class="keyword">false</span> || (strpos($_SERVER[<span class="string">'HTTP_ACCEPT'</span>], <span class="string">'vnd.wap.wml'</span>) &lt; strpos($_SERVER[<span class="string">'HTTP_ACCEPT'</span>], <span class="string">'text/html'</span>)))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h4><p>根据<code>isMobile()</code>return的是<code>true</code>还是<code>false</code>执行相关的业务操作。例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$mobileClinet = isMobile();</span><br><span class="line"><span class="keyword">if</span> (!$mobileClient) &#123;</span><br><span class="line">    <span class="comment">// 执行手机访问的业务</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 执行PC访问的业务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开发应用有时候会涉及到针对不同的访问类型提供不同的业务处理。以下是分别使用JavaScript和PHP进行判断的简单介绍。&lt;/p&gt;
&lt;h3 id=&quot;使用JavaScript判断&quot;&gt;&lt;a href=&quot;#使用JavaScript判断&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="PHP" scheme="https://geehon.github.io/categories/PHP/"/>
    
    
      <category term="JavaScript" scheme="https://geehon.github.io/tags/JavaScript/"/>
    
      <category term="PHP" scheme="https://geehon.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>关于MVC的一些看法</title>
    <link href="https://geehon.github.io/post/b3189365.html"/>
    <id>https://geehon.github.io/post/b3189365.html</id>
    <published>2019-01-24T11:14:43.000Z</published>
    <updated>2019-01-24T11:20:51.856Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MVC和三层架构"><a href="#MVC和三层架构" class="headerlink" title="MVC和三层架构"></a>MVC和三层架构</h2><p>MVC 可分为：<code>Model 模型层</code>、<code>View 视图层</code>、<code>Controller 控制层</code>；<br>三层架构为：视图层、控制层、业务逻辑层</p><p>架构中，我们可以如此分布：<br>控制层+（（模型层数据访问层）+ 视图层）= 合理架构。</p><h3 id="数据模型层"><a href="#数据模型层" class="headerlink" title="数据模型层"></a>数据模型层</h3><p>顾名思义，用来和数据库进行连接交互，SQL语句当然应该置于此。</p><p>模型层中数据访问模块的功能如下：<br>1)实现数据的读取与存储操作。<br>2)实现事务处理。</p><h3 id="界面视图层"><a href="#界面视图层" class="headerlink" title="界面视图层"></a>界面视图层</h3><p>主要是处理和用户进行交互的界面，显示结果或者接受输入。</p><p>视图层中用户界面模块的功能如下：</p><p>1)与用户的交互，接收用户的各种输入以及输出各种提示信息或处理结果。<br>2)对于输入的数据进行数据校验，过滤非法数据。<br>3)向业务层发送处理请求。</p><h3 id="业务控制层"><a href="#业务控制层" class="headerlink" title="业务控制层"></a>业务控制层</h3><p>进行各种逻辑判断。也就是业务逻辑的封装，如有一客户要下一个用账户付款的订单，但该客户账户内的余额不够，则不该允许此客户下订单，这种逻辑就应放在业务层。</p><p>业务层中业务处理模块的功能如下：<br>1)实现各种业务处理逻辑或处理算法。<br>2)验证请求者的权限。<br>3)向数据层发送数据操作的请求。<br>4)向用户层返回处理结果。</p><h2 id="MVC的优点"><a href="#MVC的优点" class="headerlink" title="MVC的优点"></a>MVC的优点</h2><p>大部分用过程语言比如ASP、PHP开发出来的Web应用，初始的开发模板就是混合层的数据编程。例如，直接向数据库发送请求并用HTML显示，开发速度往往比较快，但由于数据页面的分离不是很直接，因而很难体现出业务模型的样子或者模型的重用性。产品设计弹性力度很小，很难满足用户的变化性需求。MVC要求对应用分层，虽然要花费额外的工作，但产品的结构清晰，产品的应用通过模型可以得到更好地体现。 </p><p><strong>首先</strong>，最重要的是<strong>应该有多个视图对应一个模型的能力</strong>。在目前用户需求的快速变化下，可能有多种方式访问应用的要求。例如，订单模型可能有本系统的订单，也有网上订单，或者其他系统的订单，但对于订单的处理都是一样，也就是说订单的处理是一致的。按MVC设计模式，一个订单模型以及多个视图即可解决问题。这样减少了代码的复制，即减少了代码的维护量，一旦模型发生改变，也易于维护。 其次，由于模型返回的数据不带任何显示格式，因而这些模型也可直接应用于接口的使用。</p><p><strong>其次</strong>控制层的概念也很有效，由于它<strong>把不同的模型和不同的视图组合在一起完成不同的请求</strong>，因此，控制层可以说是包含了用户请求权限的概念。 </p><p><strong>最后</strong>，它还有<strong>利于软件工程化管理</strong>。由于不同的层各司其职，每一层不同的应用具有某些相同的特征，有利于通过工程化、工具化产生管理程序代码。 </p><h2 id="MVC的不足"><a href="#MVC的不足" class="headerlink" title="MVC的不足"></a>MVC的不足</h2><p><strong>增加了系统结构和实现的复杂性</strong>。对于简单的界面，严格遵循MVC，使模型、视图与控制器分离，会增加结构的复杂性，并可能产生过多的更新操作，降低运行效率。</p><p><strong>视图与控制器间的过于紧密的连接</strong>。视图与控制器是相互分离，但确实联系紧密的部件，视图没有控制器的存在，其应用是很有限的，反之亦然，这样就妨碍了他们的独立重用。 </p><p><strong>视图对模型数据的低效率访问</strong>。依据模型操作接口的不同，视图可能需要多次调用才能获得足够的显示数据。对未变化数据的不必要的频繁访问，也将损害操作性能。 </p><p>目前，一般高级的界面工具或构造器不支持MVC架构。改造这些工具以适应MVC需要和建立分离的部件的<strong>代价是很高</strong>的，从而造成使用MVC的困难。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MVC和三层架构&quot;&gt;&lt;a href=&quot;#MVC和三层架构&quot; class=&quot;headerlink&quot; title=&quot;MVC和三层架构&quot;&gt;&lt;/a&gt;MVC和三层架构&lt;/h2&gt;&lt;p&gt;MVC 可分为：&lt;code&gt;Model 模型层&lt;/code&gt;、&lt;code&gt;View 视图层&lt;
      
    
    </summary>
    
      <category term="看法" scheme="https://geehon.github.io/categories/%E7%9C%8B%E6%B3%95/"/>
    
    
      <category term="技术" scheme="https://geehon.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="MVC" scheme="https://geehon.github.io/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>PHP开发安全问题总结</title>
    <link href="https://geehon.github.io/post/fafef4eb.html"/>
    <id>https://geehon.github.io/post/fafef4eb.html</id>
    <published>2019-01-21T10:37:55.000Z</published>
    <updated>2019-01-21T10:43:41.830Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.codeproject.com/KB/PHP/363897/php_security.jpg" alt=""></p><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>提供Internet服务时，在开发代码时必须始终牢记安全性。大多数PHP脚本对安全问题都不敏感；特别是对大多数没有经验的开发者来说。但是，基于对代码重要性，非常有必要采用一致的安全策略。当你在服务器上放置任何财产有关的东西时，很可能会有人试图随便破解它。创建一个论坛程序或任何类型的购物车，被攻击的可能性就会有所上升。<a id="more"></a></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>以下是保护您的网络内容的一些一般安全准则：</p><h2 id="不要相信表单"><a href="#不要相信表单" class="headerlink" title="不要相信表单"></a>不要相信表单</h2><p>利用表单攻击是很寻常的。通过使用简单的JavaScript技巧，您可以限制您的表单以仅允许的字段。对于一般的Javascript前台验证，由于无法得知用户的行为，例如用户关闭了浏览器的Javascript引擎或发布自定义表单数据时，客户端验证会弹出窗口。</p><p>用户主要通过表单参数与脚本进行交互，因此它们也成了最大的安全风险。这告诉我们什么？要始终验证传递给PHP脚本的任何数据。在本文中，我们将向您展示如何分析和防止跨站点脚本（XSS）攻击，严重的话会劫持你的用户凭据。您还将了解如何防止可能污染或破坏数据的MySQL注入攻击。</p><h2 id="不要相信用户"><a href="#不要相信用户" class="headerlink" title="不要相信用户"></a>不要相信用户</h2><p>要始终假设您的网站收集的每一条数据都充满了有害的代码。对每条数据都要进行过滤，即使你肯定没有人试图攻击你的应用。</p><h2 id="关闭全局变量"><a href="#关闭全局变量" class="headerlink" title="关闭全局变量"></a>关闭全局变量</h2><p>最大安全漏洞是启用了<code>register_globals</code>配置参数。不过幸运的是，它在PHP 4.2及更高版本中默认关闭。如果<code>register_globals</code>打开，那么你可以通过在服务器的php.ini文件中将<code>register_globals</code>变量设置为Off来禁用此功能。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">register_globals</span> = <span class="literal">Off</span></span><br></pre></td></tr></table></figure><p>新手程序员查看注册的全局变量是一种便利，但他们没有意识到这个设置有多危险。启用了全局变量的服务器会自动将全局变量分配给任何表单参数。为了了解这是如何工作的以及为什么这是危险的，让我们看一个例子。</p><p>假设您有一个名为<code>process.php</code>的脚本，它将表单数据输入到您的用户数据库中。原始表单看起来像这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"15"</span> <span class="attr">maxlength</span>=<span class="string">"64"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行<code>process.php</code>时，启用了已注册全局变量的PHP会将此参数的值放入<code>$ username</code>变量中。通过<code>$ _POST [&#39;username&#39;]</code>或<code>$ _GET [&#39;username&#39;]</code>可以节省一些打字输入。但不幸的是，这也造成了一个安全问题。因为PHP为通过GET或POST参数发送到脚本的任何值设置了一个变量，如果你没有显式初始化变量并且你不希望有人操纵它，这是一个大问题。</p><p>以下面的脚本为例 - 如果<code>$ authorized</code>变量为<code>true</code>，它会向用户显示机密数据。在正常情况下，仅当用户已通过假设的<code>authenticated_user()</code>函数进行了正确的身份验证时，<code>$ authorized</code>变量才会设置为<code>true</code>。但是如果你有<code>register_globals</code>活动，任何人都可以发送一个GET参数，如<code>authorized = 1</code>来覆盖这个：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Define $authorized = true only if user is authenticated</span></span><br><span class="line"><span class="keyword">if</span> (authenticated_user()) &#123;</span><br><span class="line">    $authorized = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这个场景寓意是你应该从预定义的服务器变量中提取表单数据。通过发布的表单传递到您的网页的所有数据都会自动存储在名为<code>$ _POST</code>的大型数组中，并且所有GET数据都存储在名为<code>$ _GET</code>的大型数组中。文件上载信息存储在名为<code>$ _FILES的</code>特殊数组中。此外，还有一个名为<code>$ _REQUEST</code>的组合变量。</p><p>要从POST方法表单访问用户名字段，请使用<code>$ _POST [&#39;username&#39;]</code>。如果用户名在URL中，请使用<code>$ _GET [&#39;username&#39;]</code>。如果您不关心值的来源，请使用<code>$ _REQUEST [&#39;username&#39;]</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$post_value = $_POST[<span class="string">'post_value'</span>];</span><br><span class="line">$get_value = $_GET[<span class="string">'get_value'</span>];</span><br><span class="line">$some_variable = $_REQUEST[<span class="string">'some_value'</span>]; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>$ _REQUEST</code>是<code>$ _GET</code>，<code>$ _POST</code>和<code>$ _COOKIE</code>数组的联合。如果您有两个或多个相同参数名称的值，请注意PHP使用的值。默认顺序是<code>cookie</code>，<code>POST</code>，然后是<code>GET</code>。</p><h2 id="推荐的安全配置选项"><a href="#推荐的安全配置选项" class="headerlink" title="推荐的安全配置选项"></a>推荐的安全配置选项</h2><h1 id="SQL注入攻击"><a href="#SQL注入攻击" class="headerlink" title="SQL注入攻击"></a>SQL注入攻击</h1><h1 id="防止基本的XSS攻击"><a href="#防止基本的XSS攻击" class="headerlink" title="防止基本的XSS攻击"></a>防止基本的XSS攻击</h1><h1 id="使用SafeHTML"><a href="#使用SafeHTML" class="headerlink" title="使用SafeHTML"></a>使用SafeHTML</h1><h1 id="使用单向哈希保护数据"><a href="#使用单向哈希保护数据" class="headerlink" title="使用单向哈希保护数据"></a>使用单向哈希保护数据</h1><h1 id="使用Mcrypt加密数据"><a href="#使用Mcrypt加密数据" class="headerlink" title="使用Mcrypt加密数据"></a>使用Mcrypt加密数据</h1><h1 id="生成随机密码"><a href="#生成随机密码" class="headerlink" title="生成随机密码"></a>生成随机密码</h1><p><a href="https://www.codeproject.com/Articles/363897/PHP-Security" target="_blank" rel="noopener">查看原文</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.codeproject.com/KB/PHP/363897/php_security.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;提供Internet服务时，在开发代码时必须始终牢记安全性。大多数PHP脚本对安全问题都不敏感；特别是对大多数没有经验的开发者来说。但是，基于对代码重要性，非常有必要采用一致的安全策略。当你在服务器上放置任何财产有关的东西时，很可能会有人试图随便破解它。创建一个论坛程序或任何类型的购物车，被攻击的可能性就会有所上升。
    
    </summary>
    
      <category term="PHP" scheme="https://geehon.github.io/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://geehon.github.io/tags/PHP/"/>
    
      <category term="安全" scheme="https://geehon.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Gitee(码云)、Github同时配置ssh key</title>
    <link href="https://geehon.github.io/post/c70e21e5.html"/>
    <id>https://geehon.github.io/post/c70e21e5.html</id>
    <published>2019-01-21T10:35:57.000Z</published>
    <updated>2019-01-21T10:43:14.837Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、创建gitee和github的ssh-key"><a href="#一、创建gitee和github的ssh-key" class="headerlink" title="一、创建gitee和github的ssh key"></a>一、创建gitee和github的ssh key</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">ssh-keygen -t rsa -C "xxxxx@xxxxx.com"</span><br></pre></td></tr></table></figure><p> 替换正确的邮箱，按enter</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/FlyingHorse/.ssh/id_rsa): id_rsa.gitee</span><br></pre></td></tr></table></figure><a id="more"></a>创建gitee的ssh key时输入id_rsa.gitee，创建github的ssh key时输入id_rsa.github<br><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in id_rsa.gitee.</span><br><span class="line">Your public key has been saved in id_rsa.gitee.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:lmjU8A4k+r6liYJmENBPM/7Frx3XDg98VeWvIQ9dLyw xxxxx@xxxxx.com</span><br><span class="line">The key's randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">| .  . o         o|</span><br><span class="line">|. ..+o +       ..|</span><br><span class="line">|. .+ oo.o       +|</span><br><span class="line">|.  .o. +o.   o .+|</span><br><span class="line">| .  ..o.S. .E.=.o|</span><br><span class="line">|.  . ...  o ==o+ |</span><br><span class="line">|o   . .  o o *o  |</span><br><span class="line">|oo . =  . .   o  |</span><br><span class="line">|o.. +            |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><p>一路按enter，知道输出如图</p><h2 id="二、把public-key复制到gitee或github"><a href="#二、把public-key复制到gitee或github" class="headerlink" title="二、把public key复制到gitee或github"></a>二、把public key复制到gitee或github</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.gitee.pub</span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDZbvgUEj3XAXH4HkW27ibdXgV6VHdrA9/WdSDHtiiC55mjPvxj3OtPxIbpeJmhWyHiJWR6</span><br><span class="line">uUuK+gkb//O51uWCPhHqxKR7+45tZ9jHqXW+hEKPp+odQgc+3hiHAjTkn3JGeIJlQp2UdJCDHBrp+kcgVeg91+y7cU3ufaUQ/hpD</span><br><span class="line">rCgn6uvwjwJgnDhV9DYi+gFUFe7LUwa1o4nfwg43ycuOOuT7c6VO2dj/0pLRUVTPQYu/C3kaaPVedir7mKIu/dM6Ec44bhYTp1Dq</span><br><span class="line">qp8BO42Cfo+n+dempqYTe2wcPvuDjSj884IATc/KvBfc86Yd2Uj7NI7li90Y3i6adoxUIWQh xxxxx@xxxxx.com</span><br></pre></td></tr></table></figure><p>查看公钥，gitee输入id_rsa.gitee.pub，github输入id_rsa.github.pub</p><p>将第二行到结尾的内容复制到gitee或github的ssh中保存</p><h2 id="三、创建配置解决ssh冲突"><a href="#三、创建配置解决ssh冲突" class="headerlink" title="三、创建配置解决ssh冲突"></a>三、创建配置解决ssh冲突</h2><p>在.ssh文件夹中创建config文件，添加以下内容以区分两个ssh key</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># gitee</span><br><span class="line">Host gitee.com</span><br><span class="line">HostName gitee.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa.gitee</span><br><span class="line"></span><br><span class="line"># github</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa.github</span><br></pre></td></tr></table></figure><h2 id="四、测试连接"><a href="#四、测试连接" class="headerlink" title="四、测试连接"></a>四、测试连接</h2><p>输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure><p>若返回如下图，则gitee则连接正常</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Welcome to Gitee.com, yourname!</span><br></pre></td></tr></table></figure><p> 输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>若返回如下图，则github则连接正常</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi yourname! You've successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、创建gitee和github的ssh-key&quot;&gt;&lt;a href=&quot;#一、创建gitee和github的ssh-key&quot; class=&quot;headerlink&quot; title=&quot;一、创建gitee和github的ssh key&quot;&gt;&lt;/a&gt;一、创建gitee和github的ssh key&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd ~/.ssh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 替换正确的邮箱，按enter&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Generating public/private rsa key pair.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Enter file in which to save the key (/c/Users/FlyingHorse/.ssh/id_rsa): id_rsa.gitee&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="git" scheme="https://geehon.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://geehon.github.io/tags/git/"/>
    
      <category term="技巧" scheme="https://geehon.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>使用PHPStrom安装laravel</title>
    <link href="https://geehon.github.io/post/793c95ad.html"/>
    <id>https://geehon.github.io/post/793c95ad.html</id>
    <published>2019-01-21T10:33:18.000Z</published>
    <updated>2019-01-21T10:42:57.579Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/GHong/blog/raw/master/picture/phpstrom-cover.png" alt=""></p><h1 id="项目安装设置"><a href="#项目安装设置" class="headerlink" title="项目安装设置"></a>项目安装设置</h1><p>打开软件选择<code>create new porject</code>,进入创建项目窗口，选择<code>Composer Project</code>。按照截图所示设置相应的Location（安装目录）、勾选<code>Download composer.phar from getcomposer.org</code>、Package输入<code>laravel/laravel</code>并在查找的结果中选择<code>laravel/laravel</code>。最后点击Create开始创建。整个安装过程的时间由于网络的环境不同有所差异。<a id="more"></a></p><p><img src="https://gitee.com/GHong/blog/raw/master/picture/laravel%20initial.png" alt=""></p><p>安装完成后可以在phpstrom的Event Log查看的相应的消息。</p><blockquote><p>Composer<br>​    Project was successfully created by Composer.<br>​    Show in log</p></blockquote><p>点击<code>Show in log</code>就可以查看具体的安装日志。</p><p><img src="https://gitee.com/GHong/blog/raw/master/picture/laravel%20log.png" alt=""></p><p>至此这个项目就相当安装好了。</p><h2 id="开发前的设置"><a href="#开发前的设置" class="headerlink" title="开发前的设置"></a>开发前的设置</h2><h3 id="设置版本控制"><a href="#设置版本控制" class="headerlink" title="设置版本控制"></a>设置版本控制</h3><p>打开project工作区全选这个项目下的文件，然后取消选择composer.phar。</p><p><img src="https://gitee.com/GHong/blog/raw/master/picture/laravel%20git.png" alt=""></p><p>然后在顶部的菜单栏里选择<code>VCS</code>-&gt;<code>Enable Version Control Integration</code></p><p><img src="https://gitee.com/GHong/blog/raw/master/picture/laravel%20git1.png" alt=""></p><p>这时候会弹出版本控制工具的对话框。我这边是设置为Git。</p><p><img src="https://gitee.com/GHong/blog/raw/master/picture/laravel%20git2.png" alt=""></p><p>点击<code>OK</code>确定。选择Version Control会弹出如下界面，点击绿色小箭头。</p><p><img src="https://gitee.com/GHong/blog/raw/master/picture/laravel%20git4.png" alt=""></p><p>此时就会弹出git的提交信息界面，按照截图所示进行操作：</p><p>选择要git提交的文件，因为是第一次提交可以把<code>Before Commit</code>下的<code>Optimize import</code>和<code>Perform code analysis</code>取消掉。最后填写Commit Message点击Commit确认提交。至此git的初始设置就相当于完成了。</p><p><img src="https://gitee.com/GHong/blog/raw/master/picture/laravel%20git3.png" alt=""></p><h3 id="安装laravel支持插件"><a href="#安装laravel支持插件" class="headerlink" title="安装laravel支持插件"></a>安装laravel支持插件</h3><p>实现代码自动补全和检查可以安装<code>Laravel Plugin</code>这个插件。点击<code>File</code>-&gt;<code>Plugin</code>在Marketplace里搜索<code>Laravel Plugin</code>选择安装并重启IDE。重启后再打开设置界面。找到<code>Languages &amp; Frameworks</code>-&gt;<code>PHP</code>-&gt;<code>Laravel</code>勾选<code>Enable plugin for this project</code>。点击Aplay确认应用。</p><p><img src="https://gitee.com/GHong/blog/raw/master/picture/laravel%20plugin.png" alt=""></p><h3 id="安装Laravel-Debugbar-扩展包"><a href="#安装Laravel-Debugbar-扩展包" class="headerlink" title="安装Laravel Debugbar 扩展包"></a>安装Laravel Debugbar 扩展包</h3><p>在菜单栏依次选择<code>Tools</code>-&gt;<code>composer</code>-&gt;<code>Manage dependencies</code>。在弹出的窗口里输入<code>barryvdh/laravel-debugbar</code>。选择要安装的版本Version to install，我这边选择最新的稳定版<code>V3.2.1</code></p><p><img src="https://gitee.com/GHong/blog/raw/master/picture/laravel%20debug.png" alt=""></p><p>再次打开部署的网站页面，就可以看到优雅的debug bar了。</p><p><img src="https://gitee.com/GHong/blog/raw/master/picture/lararvel%20debug.png" alt=""></p><p>安装其他的扩展包也可以按照这个方法进行安装。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://gitee.com/GHong/blog/raw/master/picture/phpstrom-cover.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;项目安装设置&quot;&gt;&lt;a href=&quot;#项目安装设置&quot; class=&quot;headerlink&quot; title=&quot;项目安装设置&quot;&gt;&lt;/a&gt;项目安装设置&lt;/h1&gt;&lt;p&gt;打开软件选择&lt;code&gt;create new porject&lt;/code&gt;,进入创建项目窗口，选择&lt;code&gt;Composer Project&lt;/code&gt;。按照截图所示设置相应的Location（安装目录）、勾选&lt;code&gt;Download composer.phar from getcomposer.org&lt;/code&gt;、Package输入&lt;code&gt;laravel/laravel&lt;/code&gt;并在查找的结果中选择&lt;code&gt;laravel/laravel&lt;/code&gt;。最后点击Create开始创建。整个安装过程的时间由于网络的环境不同有所差异。
    
    </summary>
    
      <category term="PHP" scheme="https://geehon.github.io/categories/PHP/"/>
    
    
      <category term="laravel" scheme="https://geehon.github.io/tags/laravel/"/>
    
      <category term="PHP" scheme="https://geehon.github.io/tags/PHP/"/>
    
      <category term="PHPstrom" scheme="https://geehon.github.io/tags/PHPstrom/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 进行数据迁移（migration）报错解决办法</title>
    <link href="https://geehon.github.io/post/a754c2fd.html"/>
    <id>https://geehon.github.io/post/a754c2fd.html</id>
    <published>2019-01-19T11:13:56.000Z</published>
    <updated>2019-01-19T11:17:55.440Z</updated>
    
    <content type="html"><![CDATA[<p>Laravel 5.4 把默认数据库字符集更改成 utf8mb4，作为对存储 emojis 的支持。只要你运行的是 MySQL v5.7.7 及更高版本，那么你就下面提到的错误。</p><blockquote><p>SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key length is 767 bytes (SQL: alter table users add unique users_email_unique (email))<a id="more"></a></p></blockquote><p>对于 MariaDB 或旧版本的 MySQL 的程序，可以找到：<code>/app/Providers/AppServiceProvider.php</code></p><p>在 <code>boot</code> 方法内设置默认字符串的长度：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Schema</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Schema::defaultStringLength(<span class="number">191</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次执行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan migrate</span><br></pre></td></tr></table></figure><blockquote><p>Migration table created successfully.<br>Migrating: 2014_10_12_000000_create_users_table<br>Migrated:  2014_10_12_000000_create_users_table<br>Migrating: 2014_10_12_100000_create_password_resets_table<br>Migrated:  2014_10_12_100000_create_password_resets_table</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Laravel 5.4 把默认数据库字符集更改成 utf8mb4，作为对存储 emojis 的支持。只要你运行的是 MySQL v5.7.7 及更高版本，那么你就下面提到的错误。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key length is 767 bytes (SQL: alter table users add unique users_email_unique (email))
    
    </summary>
    
      <category term="PHP" scheme="https://geehon.github.io/categories/PHP/"/>
    
    
      <category term="laravel" scheme="https://geehon.github.io/tags/laravel/"/>
    
      <category term="PHP" scheme="https://geehon.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Facebook账号一键登录</title>
    <link href="https://geehon.github.io/post/b05283f6.html"/>
    <id>https://geehon.github.io/post/b05283f6.html</id>
    <published>2019-01-16T11:17:10.000Z</published>
    <updated>2019-01-20T07:10:13.549Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/GHong/blog/raw/master/picture/facebook.png" alt=""></p><p>公司最近做的一个项目要求使用Facebook实现一键登录的功能。所谓的Facebook登录就是获取用户在Facebook的资料，通过这些资料（邮箱等）登录或者注册目标网站。这中间Facebook提供了相应的接口，通过这个接口获取用户授权就能拿到相应的用户资料。<a id="more"></a>虽然整个过程完成下来还算比较顺利。这边还是要做一下记录。</p><h2 id="申请应用及配置"><a href="#申请应用及配置" class="headerlink" title="申请应用及配置"></a>申请应用及配置</h2><p>在使用之前，需要先在Facebook开发者平台注册账号，新建应用，然后获取新建应用的编号APPID。相应的流程开发平台写的还是相对比较清楚的，这里就不一一赘述。其中要注意的是：有效 OAuth 跳转 URL要填写正确。</p><p><img src="https://gitee.com/GHong/blog/raw/master/picture/fbhuitiao.png" alt=""></p><p>还有一个是隐私政策网站的填写。这个关乎应用能不能的公开发布。找到开发平台的控制面板下面有个<code>设置</code>-&gt;<code>基本</code>。在隐私权政策网址里可以填<code>http://wp4fb.com/how-to-add-a-privacy-policy-to-your-apps/</code>（这个不是唯一的，填写的地址有效即可）。然后保存更改。</p><p><img src="https://gitee.com/GHong/blog/raw/master/picture/fbyinsi.png" alt=""></p><p>然后就可以点击应用发布开关，弹窗提示点击确定即可。最后效果是这样的：</p><p><img src="https://gitee.com/GHong/blog/raw/master/picture/fbkaiguan2.png" alt=""></p><h2 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h2><h3 id="1-检查登录状态"><a href="#1-检查登录状态" class="headerlink" title="1. 检查登录状态"></a>1. 检查登录状态</h3><p>加载网页时应采取的第一步是检查用户是否已使用 Facebook 登录功能登录您的应用。调用 <a href="https://developers.facebook.com/docs/reference/javascript/FB.getLoginStatus" target="_blank" rel="noopener"><code>FB.getLoginStatus</code></a> 即可开始此流程。此函数会触发 Facebook 调用，获取登录状态，并调用包含结果的回调函数。</p><p>下面是将在页面加载期间运行以检查用户登录状态的部分代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FB.getLoginStatus(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    statusChangeCallback(response);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>提供给回调的<code>response</code>对象包括的字段：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 用户登录状态</span></span><br><span class="line">    status: <span class="string">'connected'</span>,    </span><br><span class="line">    authResponse: &#123;</span><br><span class="line">        <span class="comment">// 包括应用用户的访问口令</span></span><br><span class="line">        accessToken: <span class="string">'...'</span>,</span><br><span class="line">        <span class="comment">// 口令到期且需要更新的 UNIX 时间</span></span><br><span class="line">        expiresIn:<span class="string">'...'</span>,</span><br><span class="line">        <span class="comment">// 登录过期和请求重新授权之前的时长（以秒为单位）</span></span><br><span class="line">        reauthorize_required_in:<span class="string">'...'</span></span><br><span class="line">        <span class="comment">// 经签名的参数，其中包括应用用户的信息。</span></span><br><span class="line">        signedRequest:<span class="string">'...'</span>,</span><br><span class="line">        <span class="comment">// 应用用户的编号</span></span><br><span class="line">        userID:<span class="string">'...'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>知道用户的登录状态后，应用就可以执行以下操作之一：</p><ul><li>如果用户登录了 Facebook 和您的应用，可将他们重定向至应用的登录后体验。</li><li>如果用户未登录您的应用，或未登录 Facebook，则可以通过 <code>FB.login()</code>呈现登录对话框，以此提示他们登录，或显示“登录”按钮。</li></ul><h3 id="2-使用JavaScript-SDK提供的登录按钮"><a href="#2-使用JavaScript-SDK提供的登录按钮" class="headerlink" title="2. 使用JavaScript SDK提供的登录按钮"></a>2. 使用JavaScript SDK提供的登录按钮</h3><p>代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"fb-root"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;(<span class="function"><span class="keyword">function</span>(<span class="params">d, s, id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> js, fjs = d.getElementsByTagName(s)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (d.getElementById(id)) <span class="keyword">return</span>;</span><br><span class="line">  js = d.createElement(s); js.id = id;</span><br><span class="line">  js.src = <span class="string">'https://connect.facebook.net/zh_CN/sdk.js#xfbml=1&amp;version=v3.2&amp;appId=申请的应用编号&amp;autoLogAppEvents=1'</span>;</span><br><span class="line">  fjs.parentNode.insertBefore(js, fjs);</span><br><span class="line">&#125;(<span class="built_in">document</span>, <span class="string">'script'</span>, <span class="string">'facebook-jssdk'</span>));&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>按钮</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fb-login-button"</span> <span class="attr">data-size</span>=<span class="string">"large"</span> <span class="attr">data-button-type</span>=<span class="string">"continue_with"</span> <span class="attr">data-auto-logout-link</span>=<span class="string">"false"</span> <span class="attr">data-use-continue-as</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-获取用户信息"><a href="#3-获取用户信息" class="headerlink" title="3. 获取用户信息"></a>3. 获取用户信息</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">fb_login</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">FB.login(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (response.status === <span class="string">'connected'</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 获取用户id、Email、名称等</span></span></span><br><span class="line"><span class="javascript">FB.api(<span class="string">'/me?fields=id,email,first_name,last_name,gender'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="comment">// 获取信息后的相关操作</span></span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(response);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="javascript">&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">alert(<span class="string">'login fail'</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript">&#125;, &#123;<span class="attr">scope</span>: <span class="string">'public_profile,email'</span>&#125;);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-完整实例代码"><a href="#4-完整实例代码" class="headerlink" title="4. 完整实例代码"></a>4. 完整实例代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.fbAsyncInit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">FB.init(&#123;</span></span><br><span class="line"><span class="javascript">appId: <span class="string">''</span>,  <span class="comment">// 这里需要改成15位你创建的Facebook应用编号</span></span></span><br><span class="line"><span class="javascript">cookie: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">xfbml: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">version: <span class="string">'v3.2'</span></span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">FB.AppEvents.logPageView();</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">(<span class="function"><span class="keyword">function</span>(<span class="params">d, s, id</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> js, fjs = d.getElementsByTagName(s)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (d.getElementById(id)) &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">js = d.createElement(s);</span></span><br><span class="line"><span class="undefined">js.id = id;</span></span><br><span class="line"><span class="javascript">js.src = <span class="string">"//connect.facebook.net/en_US/sdk.js"</span>;</span></span><br><span class="line"><span class="undefined">fjs.parentNode.insertBefore(js, fjs);</span></span><br><span class="line"><span class="javascript">&#125;(<span class="built_in">document</span>, <span class="string">'script'</span>, <span class="string">'facebook-jssdk'</span>));</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">fb_login</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">FB.login(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (response.status === <span class="string">'connected'</span>) &#123;</span></span><br><span class="line"><span class="javascript">FB.api(<span class="string">'/me?fields=id,email,first_name,last_name,gender'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取信息后的相关操作</span></span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="javascript">&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">alert(<span class="string">'login fail'</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript">&#125;, &#123;<span class="attr">scope</span>: <span class="string">'public_profile,email'</span>&#125;);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-btn-box"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>  <span class="attr">onclick</span>=<span class="string">"fb_login();"</span>&gt;</span>Login with Facebook<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Facebook JavaScript SDK在最新的3.2版本中跳转 URI 和 JavaScript SDK 强制使用 HTTPS。Facebook是使用标准的 OAuth 客户端口令流程。其授权过程跟其他OAuth没什么区别，按照官网的流程走一般都能成功。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://gitee.com/GHong/blog/raw/master/picture/facebook.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;公司最近做的一个项目要求使用Facebook实现一键登录的功能。所谓的Facebook登录就是获取用户在Facebook的资料，通过这些资料（邮箱等）登录或者注册目标网站。这中间Facebook提供了相应的接口，通过这个接口获取用户授权就能拿到相应的用户资料。
    
    </summary>
    
      <category term="JavaScript" scheme="https://geehon.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://geehon.github.io/tags/JavaScript/"/>
    
      <category term="Facebook" scheme="https://geehon.github.io/tags/Facebook/"/>
    
  </entry>
  
  <entry>
    <title>PHPStrom文件修改标星提示</title>
    <link href="https://geehon.github.io/post/9ffb46c.html"/>
    <id>https://geehon.github.io/post/9ffb46c.html</id>
    <published>2019-01-13T10:55:08.000Z</published>
    <updated>2019-01-20T07:10:51.105Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/GHong/blog/raw/master/picture/phpstrom-cover.png" alt=""></p><p>phpstrom设置标星提示文件修改</p><p>Eclipse中文件修改后没有保存前文件都会有星号提示，phpstrom默认没有提示，但是可以通过如下设置完成：<a id="more"></a></p><p>File -&gt; Settings -&gt; Editor -&gt; General -&gt; Editor Tabs: Mark modified (*)</p><p><img src="https://gitee.com/GHong/blog/raw/master/picture/phpstromstar.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://gitee.com/GHong/blog/raw/master/picture/phpstrom-cover.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;phpstrom设置标星提示文件修改&lt;/p&gt;
&lt;p&gt;Eclipse中文件修改后没有保存前文件都会有星号提示，phpstrom默认没有提示，但是可以通过如下设置完成：
    
    </summary>
    
      <category term="技巧" scheme="https://geehon.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="软件" scheme="https://geehon.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="phpstrom" scheme="https://geehon.github.io/tags/phpstrom/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码风格规范</title>
    <link href="https://geehon.github.io/post/e54bdc58.html"/>
    <id>https://geehon.github.io/post/e54bdc58.html</id>
    <published>2019-01-13T10:52:02.000Z</published>
    <updated>2019-01-20T07:11:43.098Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/GHong/blog/raw/master/picture/codingstyle.png" alt=""></p><h1 id="编码风格指南"><a href="#编码风格指南" class="headerlink" title="编码风格指南"></a><a href="https://www.php-fig.org/psr/psr-2/" target="_blank" rel="noopener">编码风格指南</a></h1><p>本指南扩展和扩展了基本编码标准PSR-1。</p><p>本指南的目的是在扫描来自不同作者的代码时减少认知摩擦。它通过枚举一组共享规则和对如何格式化PHP代码的期望来实现。<a id="more"></a></p><p>这里的风格规则源于各个成员项目之间的共性。当各个作者跨多个项目进行协作时，在所有这些项目中使用一套指南会很有帮助。因此，本指南的好处不在于规则本身，而在于共享这些规则。</p><p>本文档中的关键词“必须”，“必须”，“必需”，“应该”，“不应该”，“应该”，“不应该”，“推荐”，“可以”和“可选”按照RFC 2119中的描述进行解释。</p><h2 id="1-概览"><a href="#1-概览" class="headerlink" title="1. 概览"></a>1. 概览</h2><ul><li>代码 <strong>必须</strong> 遵循 [<a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md" target="_blank" rel="noopener">PSR-1</a>] 中的编码规范 。</li><li>代码 <strong>必须</strong> 使用 4 个空格符而不是「Tab 键」进行缩进。</li><li>每行的字符数 <strong>应该</strong> 软性保持在 80 个之内，理论上 <strong>一定不可</strong> 多于 120 个，但 <strong>一定不可</strong> 有硬性限制。</li><li>每个 <code>namespace</code> 命名空间声明语句和 <code>use</code> 声明语句块后面，<strong>必须</strong> 插入一个空白行。</li><li>类的开始花括号（<code>{</code>） <strong>必须</strong> 写在函数声明后自成一行，结束花括号（<code>}</code>）也 <strong>必须</strong> 写在函数主体后自成一行。</li><li>方法的开始花括号（<code>{</code>） <strong>必须</strong> 写在函数声明后自成一行，结束花括号（<code>}</code>）也 <strong>必须</strong> 写在函数主体后自成一行。</li><li>类的属性和方法 <strong>必须</strong> 添加访问修饰符（<code>private</code>、<code>protected</code> 以及 <code>public</code>），<code>abstract</code> 以及 <code>final</code> <strong>必须</strong> 声明在访问修饰符之前，而 <code>static</code> <strong>必须</strong> 声明在访问修饰符之后。</li><li>控制结构的关键字后 <strong>必须</strong> 要有一个空格符，而调用方法或函数时则 <strong>一定不可</strong> 有。</li><li>控制结构的开始花括号（<code>{</code>） <strong>必须</strong> 写在声明的同一行，而结束花括号（<code>}</code>） <strong>必须</strong> 写在主体后自成一行。</li><li>控制结构的开始左括号后和结束右括号前，都 <strong>一定不可</strong> 有空格符。</li></ul><h3 id="1-1-示例"><a href="#1-1-示例" class="headerlink" title="1.1. 示例"></a>1.1. 示例</h3><p>本示例将作为下文规则的快速概览：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Package</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">FooInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">BarClass</span> <span class="title">as</span> <span class="title">Bar</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">OtherVendor</span>\<span class="title">OtherPackage</span>\<span class="title">BazClass</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">Bar</span> <span class="keyword">implements</span> <span class="title">FooInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sampleMethod</span><span class="params">($a, $b = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($a === $b) &#123;</span><br><span class="line">            bar();</span><br><span class="line">        &#125; <span class="keyword">elseif</span> ($a &gt; $b) &#123;</span><br><span class="line">            $foo-&gt;bar($arg1);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            BazClass::bar($arg2, $arg3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// method body</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-通则"><a href="#2-通则" class="headerlink" title="2. 通则"></a>2. 通则</h2><h3 id="2-1-基本编码准则"><a href="#2-1-基本编码准则" class="headerlink" title="2.1. 基本编码准则"></a>2.1. 基本编码准则</h3><p>代码 <strong>必须</strong> 符合 <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md" target="_blank" rel="noopener">PSR-1</a> 中的所有规范。</p><h3 id="2-2-文件"><a href="#2-2-文件" class="headerlink" title="2.2. 文件"></a>2.2. 文件</h3><p>所有 PHP 文件 <strong>必须</strong> 使用 <code>Unix LF (linefeed)</code> 作为行的结束符。</p><p>所有 PHP 文件 <strong>必须</strong> 以一个空白行作为结束。</p><p>纯 PHP 代码文件 <strong>必须</strong> 省略最后的 <code>?&gt;</code> 结束标签。</p><h3 id="2-3-行"><a href="#2-3-行" class="headerlink" title="2.3. 行"></a>2.3. 行</h3><p>行的长度 <strong>一定不可</strong> 有硬性的约束。</p><p>软性的长度约束 <strong>必须</strong> 要限制在 120 个字符以内，若超过此长度，带代码规范检查的编辑器 <strong>必须</strong> 要发出警告，不过 <strong>一定不可</strong> 发出错误提示。</p><p>每行 <strong>不该</strong> 多于80个字符，大于80字符的行 <strong>应该</strong> 折成多行。</p><p>非空行后 <strong>一定不可</strong> 有多余的空格符。</p><p>空行 <strong>可以</strong> 使得阅读代码更加方便以及有助于代码的分块。</p><p>每行 <strong>一定不可</strong> 存在多于一条语句。</p><h3 id="2-4-缩进"><a href="#2-4-缩进" class="headerlink" title="2.4. 缩进"></a>2.4. 缩进</h3><p>代码 <strong>必须</strong> 使用 4 个空格来进行缩进， 并且 <strong>一定不能</strong> 使用 <code>tab</code> 键来缩进。</p><blockquote><p>注：仅使用空格，而不是使用空格和 <code>tab</code> 键混在一起， 能帮助避免在查看代码差异，打补丁，查看提交历史，以及进行注解时产生问题。使用空格也使得代码对齐更轻松。</p></blockquote><h3 id="2-5-关键字与-True-False-Null"><a href="#2-5-关键字与-True-False-Null" class="headerlink" title="2.5. 关键字与 True/False/Null"></a>2.5. 关键字与 True/False/Null</h3><p>PHP 的 <a href="http://php.net/manual/en/reserved.keywords.php" target="_blank" rel="noopener">关键字</a> <strong>必须</strong> 使用小写形式。</p><p>PHP 的常量 <code>true</code>， <code>false</code>， 还有 <code>null</code> <strong>必须</strong> 使用小写形式。</p><h2 id="3-命名空间和使用声明"><a href="#3-命名空间和使用声明" class="headerlink" title="3. 命名空间和使用声明"></a>3. 命名空间和使用声明</h2><p><code>namespace</code> 声明之后 <strong>必须</strong> 存在一个空行。</p><p>所有的 <code>use</code> 声明 <strong>必须</strong> 位于 <code>namespace</code> 声明之后。</p><p>每条 <code>use</code> 声明 <strong>必须</strong> 只有一个 <code>use</code> 关键字。</p><p><code>use</code> 语句块之后 <strong>必须</strong> 存在一个空行。</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Package</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">FooClass</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">BarClass</span> <span class="title">as</span> <span class="title">Bar</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">OtherVendor</span>\<span class="title">OtherPackage</span>\<span class="title">BazClass</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... additional PHP code ...</span></span><br></pre></td></tr></table></figure><h2 id="4-类、属性和方法"><a href="#4-类、属性和方法" class="headerlink" title="4. 类、属性和方法"></a>4. 类、属性和方法</h2><p>此处的「类」泛指所有的「class类」、「接口」以及「traits 可复用代码块」。</p><h3 id="4-1-扩展与继承"><a href="#4-1-扩展与继承" class="headerlink" title="4.1. 扩展与继承"></a>4.1. 扩展与继承</h3><p>关键词 <code>extends</code> 和 <code>implements</code> <strong>必须</strong> 写在类名称的同一行。</p><p>类的开始花括号 <strong>必须</strong> 独占一行，结束花括号也 <strong>必须</strong> 在类主体后独占一行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Package</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">FooClass</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">BarClass</span> <span class="title">as</span> <span class="title">Bar</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">OtherVendor</span>\<span class="title">OtherPackage</span>\<span class="title">BazClass</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> <span class="keyword">extends</span> <span class="title">ParentClass</span> <span class="keyword">implements</span> \<span class="title">ArrayAccess</span>, \<span class="title">Countable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// constants, properties, methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>implements</code> 的继承列表也 <strong>可以</strong> 分成多行，这样的话，每个继承接口名称都 <strong>必须</strong> 分开独立成行，包括第一个。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Package</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">FooClass</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">BarClass</span> <span class="title">as</span> <span class="title">Bar</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">OtherVendor</span>\<span class="title">OtherPackage</span>\<span class="title">BazClass</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> <span class="keyword">extends</span> <span class="title">ParentClass</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">    \<span class="title">ArrayAccess</span>,</span></span><br><span class="line"><span class="class">    \<span class="title">Countable</span>,</span></span><br><span class="line"><span class="class">    \<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// constants, properties, methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-属性"><a href="#4-2-属性" class="headerlink" title="4.2. 属性"></a>4.2. 属性</h3><p>每个属性都 <strong>必须</strong> 添加访问修饰符。</p><p><strong>一定不可</strong> 使用关键字 <code>var</code> 声明一个属性。</p><p>每条语句 <strong>一定不可</strong> 定义超过一个属性。</p><p><strong>不该</strong> 使用下划线作为前缀，来区分属性是 protected 或 private。</p><p>以下是属性声明的一个范例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Package</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $foo = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-方法"><a href="#4-3-方法" class="headerlink" title="4.3. 方法"></a>4.3. 方法</h3><p>所有方法都 <strong>必须</strong> 添加访问修饰符。</p><p><strong>不该</strong> 使用下划线作为前缀，来区分方法是 protected 或 private 访问修饰符。</p><p>方法名称后 <strong>一定不可</strong> 有空格符，其开始花括号 <strong>必须</strong> 独占一行，结束花括号也 <strong>必须</strong> 在方法主体后单独成一行。参数左括号后和右括号前 <strong>一定不可</strong> 有空格。</p><p>一个标准的方法声明可参照以下范例，留意其括号、逗号、空格以及花括号的位置。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Package</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fooBarBaz</span><span class="params">($arg1, &amp;$arg2, $arg3 = [])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// method body</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-方法的参数"><a href="#4-4-方法的参数" class="headerlink" title="4.4. 方法的参数"></a>4.4. 方法的参数</h3><p>参数列表中，每个逗号后面 <strong>必须</strong> 要有一个空格，而逗号前面 <strong>一定不可</strong> 有空格。</p><p>有默认值的参数，<strong>必须</strong> 放到参数列表的末尾。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Package</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">($arg1, &amp;$arg2, $arg3 = [])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// method body</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数列表 <strong>可以</strong> 分列成多行，这样，包括第一个参数在内的每个参数都 <strong>必须</strong> 单独成行。</p><p>拆分成多行的参数列表后，结束括号以及方法开始花括号 <strong>必须</strong> 写在同一行，中间用一个空格分隔。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Package</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">aVeryLongMethodName</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        ClassTypeHint $arg1,</span></span></span><br><span class="line"><span class="function"><span class="params">        &amp;$arg2,</span></span></span><br><span class="line"><span class="function"><span class="params">        array $arg3 = []</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>&#123;</span><br><span class="line">        <span class="comment">// method body</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-abstract-final-和-static-关键字"><a href="#4-5-abstract-final-和-static-关键字" class="headerlink" title="4.5. abstract, final, 和 static 关键字"></a>4.5. <code>abstract</code>, <code>final</code>, 和 <code>static</code> 关键字</h3><p>需要添加 <code>abstract</code> 或 <code>final</code> 声明时，<strong>必须</strong> 写在访问修饰符前，而 <code>static</code> 则 <strong>必须</strong> 写在其后。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Package</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> $foo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">zim</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// method body</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-6-方法及函数调用"><a href="#4-6-方法及函数调用" class="headerlink" title="4.6. 方法及函数调用"></a>4.6. 方法及函数调用</h3><p>方法及函数调用时，方法名或函数名与参数左括号之间 <strong>一定不可</strong> 有空格，参数右括号前也 <strong>一定不可</strong> 有空格。每个逗号前 <strong>一定不可</strong> 有空格，但其后 <strong>必须</strong> 有一个空格。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">bar();</span><br><span class="line">$foo-&gt;bar($arg1);</span><br><span class="line">Foo::bar($arg2, $arg3);</span><br></pre></td></tr></table></figure><p>参数 <strong>可以</strong> 分列成多行，此时包括第一个参数在内的每个参数都 <strong>必须</strong> 单独成行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$foo-&gt;bar(</span><br><span class="line">    $longArgument,</span><br><span class="line">    $longerArgument,</span><br><span class="line">    $muchLongerArgument</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="5-控制结构"><a href="#5-控制结构" class="headerlink" title="5. 控制结构"></a>5. 控制结构</h2><p>控制结构的基本规范如下：</p><ul><li>控制结构关键词后 <strong>必须</strong> 有一个空格。</li><li>左括号 <code>(</code> 后 <strong>一定不可</strong> 有空格。</li><li>右括号 <code>)</code> 前也 <strong>一定不可</strong> 有空格。</li><li>右括号 <code>)</code> 与开始花括号 <code>{</code> 间 <strong>必须</strong> 有一个空格。</li><li>结构体主体 <strong>必须</strong> 要有一次缩进。</li><li>结束花括号 <code>}</code> <strong>必须</strong> 在结构体主体后单独成行。</li></ul><p>每个结构体的主体都 <strong>必须</strong> 被包含在成对的花括号之中，<br>这能让结构体更加标准化，以及减少加入新行时，出错的可能性。</p><h3 id="5-1-if-elseif-else"><a href="#5-1-if-elseif-else" class="headerlink" title="5.1. if, elseif, else"></a>5.1. <code>if</code>, <code>elseif</code>, <code>else</code></h3><p>标准的 <code>if</code> 结构如下代码所示，请留意「括号」、「空格」以及「花括号」的位置，<br>注意 <code>else</code> 和 <code>elseif</code> 都与前面的结束花括号在同一行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ($expr1) &#123;</span><br><span class="line">    <span class="comment">// if body</span></span><br><span class="line">&#125; <span class="keyword">elseif</span> ($expr2) &#123;</span><br><span class="line">    <span class="comment">// elseif body</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// else body;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>应该</strong> 使用关键词 <code>elseif</code> 代替所有 <code>else if</code> ，以使得所有的控制关键字都像是单独的一个词。</p><h3 id="5-2-switch-case"><a href="#5-2-switch-case" class="headerlink" title="5.2. switch, case"></a>5.2. <code>switch</code>, <code>case</code></h3><p>标准的 <code>switch</code> 结构如下代码所示，留意括号、空格以及花括号的位置。</p><p><code>case</code> 语句 <strong>必须</strong> 相对 <code>switch</code> 进行一次缩进，而 <code>break</code> 语句以及 <code>case</code> 内的其它语句都 <strong>必须</strong> 相对 <code>case</code> 进行一次缩进。</p><p>如果存在非空的 <code>case</code> 直穿语句，主体里 <strong>必须</strong> 有类似 <code>// no break</code> 的注释。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">switch</span> ($expr) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'First case, with a break'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Second case, which falls through'</span>;</span><br><span class="line">        <span class="comment">// no break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Third case, return instead of break'</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Default case'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-while-do-while"><a href="#5-3-while-do-while" class="headerlink" title="5.3. while, do while"></a>5.3. <code>while</code>, <code>do while</code></h3><p>一个规范的 <code>while</code> 语句应该如下所示，注意其「括号」、「空格」以及「花括号」的位置。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">while</span> ($expr) &#123;</span><br><span class="line">    <span class="comment">// structure body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的，标准的 <code>do while</code> 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// structure body;</span></span><br><span class="line">&#125; <span class="keyword">while</span> ($expr);</span><br></pre></td></tr></table></figure><h3 id="5-4-for"><a href="#5-4-for" class="headerlink" title="5.4. for"></a>5.4. <code>for</code></h3><p>标准的 <code>for</code> 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">10</span>; $i++) &#123;</span><br><span class="line">    <span class="comment">// for body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-foreach"><a href="#5-5-foreach" class="headerlink" title="5.5. foreach"></a>5.5. <code>foreach</code></h3><p>标准的 <code>foreach</code> 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">foreach</span> ($iterable <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">    <span class="comment">// foreach body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-6-try-catch"><a href="#5-6-try-catch" class="headerlink" title="5.6. try, catch"></a>5.6. <code>try</code>, <code>catch</code></h3><p>标准的 <code>try catch</code> 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// try body</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (FirstExceptionType $e) &#123;</span><br><span class="line">    <span class="comment">// catch body</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (OtherExceptionType $e) &#123;</span><br><span class="line">    <span class="comment">// catch body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-闭包"><a href="#6-闭包" class="headerlink" title="6. 闭包"></a>6. 闭包</h2><p>闭包声明时，关键词 <code>function</code> 后以及关键词 <code>use</code> 的前后都 <strong>必须</strong> 要有一个空格。</p><p>开始花括号 <strong>必须</strong> 写在声明的同一行，结束花括号 <strong>必须</strong> 紧跟主体结束的下一行。</p><p>参数列表和变量列表的左括号后以及右括号前，<strong>一定不可</strong> 有空格。</p><p>参数和变量列表中，逗号前 <strong>一定不可</strong> 有空格，而逗号后 <strong>必须</strong> 要有空格。</p><p>闭包中有默认值的参数 <strong>必须</strong> 放到列表的后面。</p><p>标准的闭包声明语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$closureWithArgs = <span class="function"><span class="keyword">function</span> <span class="params">($arg1, $arg2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// body</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$closureWithArgsAndVars = <span class="function"><span class="keyword">function</span> <span class="params">($arg1, $arg2)</span> <span class="title">use</span> <span class="params">($var1, $var2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// body</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>参数列表以及变量列表 <strong>可以</strong> 分成多行，这样，包括第一个在内的每个参数或变量都 <strong>必须</strong> 单独成行，而列表的右括号与闭包的开始花括号 <strong>必须</strong> 放在同一行。</p><p>以下几个例子，包含了参数和变量列表被分成多行的多情况。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$longArgs_noVars = <span class="function"><span class="keyword">function</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    $longArgument,</span></span></span><br><span class="line"><span class="function"><span class="params">    $longerArgument,</span></span></span><br><span class="line"><span class="function"><span class="params">    $muchLongerArgument</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// body</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$noArgs_longVars = <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    $longVar1,</span></span></span><br><span class="line"><span class="function"><span class="params">    $longerVar2,</span></span></span><br><span class="line"><span class="function"><span class="params">    $muchLongerVar3</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// body</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$longArgs_longVars = <span class="function"><span class="keyword">function</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    $longArgument,</span></span></span><br><span class="line"><span class="function"><span class="params">    $longerArgument,</span></span></span><br><span class="line"><span class="function"><span class="params">    $muchLongerArgument</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> <span class="title">use</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    $longVar1,</span></span></span><br><span class="line"><span class="function"><span class="params">    $longerVar2,</span></span></span><br><span class="line"><span class="function"><span class="params">    $muchLongerVar3</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// body</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$longArgs_shortVars = <span class="function"><span class="keyword">function</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    $longArgument,</span></span></span><br><span class="line"><span class="function"><span class="params">    $longerArgument,</span></span></span><br><span class="line"><span class="function"><span class="params">    $muchLongerArgument</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> <span class="title">use</span> <span class="params">($var1)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// body</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$shortArgs_longVars = <span class="function"><span class="keyword">function</span> <span class="params">($arg)</span> <span class="title">use</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    $longVar1,</span></span></span><br><span class="line"><span class="function"><span class="params">    $longerVar2,</span></span></span><br><span class="line"><span class="function"><span class="params">    $muchLongerVar3</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// body</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意，闭包被直接用作函数或方法调用的参数时，以上规则仍然适用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$foo-&gt;bar(</span><br><span class="line">    $arg1,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="params">($arg2)</span> <span class="title">use</span> <span class="params">($var1)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 主体</span></span><br><span class="line">    &#125;,</span><br><span class="line">    $arg3</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><p>本指南故意删除了许多风格与实践， 它们包括但不限于：</p><ul><li>全局变量和常量的声明</li><li>函数声明</li><li>运算符与赋值</li><li>行间对齐</li><li>注释与文档描述块</li><li>类名前缀与后缀</li><li>最佳实践</li></ul><p>本指南将来的修订和扩展 <strong>可能</strong> 会弥补上述或其他风格与最佳实践。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://gitee.com/GHong/blog/raw/master/picture/codingstyle.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;编码风格指南&quot;&gt;&lt;a href=&quot;#编码风格指南&quot; class=&quot;headerlink&quot; title=&quot;编码风格指南&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.php-fig.org/psr/psr-2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;编码风格指南&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;本指南扩展和扩展了基本编码标准PSR-1。&lt;/p&gt;
&lt;p&gt;本指南的目的是在扫描来自不同作者的代码时减少认知摩擦。它通过枚举一组共享规则和对如何格式化PHP代码的期望来实现。
    
    </summary>
    
      <category term="PHP" scheme="https://geehon.github.io/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://geehon.github.io/tags/PHP/"/>
    
      <category term="PSR" scheme="https://geehon.github.io/tags/PSR/"/>
    
      <category term="代码规范" scheme="https://geehon.github.io/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>PHP 基本代码标准</title>
    <link href="https://geehon.github.io/post/ae1a60a8.html"/>
    <id>https://geehon.github.io/post/ae1a60a8.html</id>
    <published>2019-01-13T10:41:53.000Z</published>
    <updated>2019-01-20T07:09:37.479Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/GHong/blog/raw/master/picture/PRS1.png" alt=""></p><h1 id="PHP标准建议"><a href="#PHP标准建议" class="headerlink" title="PHP标准建议"></a><a href="https://www.php-fig.org/psr/psr-1/" target="_blank" rel="noopener">PHP标准建议</a></h1><p>根据<a href="https://www.php-fig.org/bylaws/psr-workflow" target="_blank" rel="noopener">PSR Workflow Bylaw</a>，每个PSR都具有正在处理的状态。一旦提案通过了入口投票，它将在此处列为“草稿”。除非PSR标记为“已接受”，否则可能会发生变化。草稿可能会发生巨大变化，但审核只会有微小的变化。</p><a id="more"></a><p>As also described in the <a href="https://www.php-fig.org/bylaws/psr-workflow" target="_blank" rel="noopener">PSR Workflow Bylaw</a>。提案的编辑或编辑们基本上是PSR的主要贡献者和作者，他们得到两位投票成员的支持。这些投票成员是协调员，负责管理审查阶段和投票以及二次发起人。</p><h2 id="PSR-1：基本编码标准"><a href="#PSR-1：基本编码标准" class="headerlink" title="PSR-1：基本编码标准"></a>PSR-1：基本编码标准</h2><p>标准的这一部分包括应该被认为是确保共享PHP代码之间高水平技术互操作性所需的标准编码元素。</p><p>本文档中的关键词“必须”，“必须”，“必需”，“应该”，“不应该”，“应该”，“不应该”，“推荐”，“可以”和“可选”按照RFC 2119中的描述进行解释。</p><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><ul><li>文件必须只使用<code>&lt;?php</code>和<code>&lt;?=</code>标签。</li><li>对于PHP代码，文件必须仅使用没有BOM的UTF-8。</li><li>文件应该声明符号（类，函数，常量等）或引起副作用（例如生成输出，更改.ini设置等），但不应该同时出现。</li><li>命名空间和类必须遵循“自动加载”PSR：[PSR-0，PSR-4]。</li><li>类名必须使用首字母大写的驼峰式进行声明。</li><li>类常量必须以全部大写形式用下划线分隔符声明。</li><li>方法名必须使用首字母小写的驼峰式进行。</li></ul><h3 id="2-文件"><a href="#2-文件" class="headerlink" title="2. 文件"></a>2. 文件</h3><h4 id="2-1-PHP标签"><a href="#2-1-PHP标签" class="headerlink" title="2.1. PHP标签"></a>2.1. PHP标签</h4><p>PHP代码必须使用长标签<code>&lt;?php?&gt;</code>或短输出标签<code>&lt;?=?&gt;</code>；不能使用其他标签变体。</p><h4 id="2-2-字符编码"><a href="#2-2-字符编码" class="headerlink" title="2.2. 字符编码"></a>2.2. 字符编码</h4><p>PHP代码必须只使用不带BOM的UTF-8编码。</p><h4 id="2-3-副作用"><a href="#2-3-副作用" class="headerlink" title="2.3. 副作用"></a>2.3. 副作用</h4><p>一份 PHP 文件中 <strong>应该</strong> 要不就只定义新的声明，如类、函数或常量等不产生 <code>副作用</code> 的操作，要不就只书写会产生 <code>副作用</code> 的逻辑操作，但 <strong>不该</strong> 同时具有两者。</p><p>「副作用」(side effects) 一词的意思是，仅仅通过包含文件，不直接声明类、函数和常量等，而执行的逻辑操作。</p><p>「副作用」包含却不仅限于：生成输出，明确使用<code>require</code>或<code>include</code>，连接到外部服务，修改ini设置，发出错误或异常，修改全局或静态变量，读取或写入一个文件，等等。</p><p>以下是具有声明和副作用的文件示例;即要避免的一个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// side effect: change ini settings</span></span><br><span class="line">ini_set(<span class="string">'error_reporting'</span>, E_ALL);</span><br><span class="line"></span><br><span class="line"><span class="comment">// side effect: loads a file</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"file.php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// side effect: generates output</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;html&gt;\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// declaration</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// function body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下示例是包含没有副作用的声明的文件;即效仿的例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// declaration</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// function body</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// conditional declaration is *not* a side effect</span></span><br><span class="line"><span class="keyword">if</span> (! function_exists(<span class="string">'bar'</span>)) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// function body</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-命名空间和类名"><a href="#3-命名空间和类名" class="headerlink" title="3. 命名空间和类名"></a>3. 命名空间和类名</h3><p>命名空间和类名 <strong>必须</strong> 遵循『自动加载』规范：[PSR-0，PSR-4]。</p><p>这意味着每个类都独立为一个文件，并且至少在一个层次的命名空间内，那就是：顶级组织名（vendor name）。</p><p>类名 <strong>必须</strong>大写开头的驼峰命名方式声明。</p><p>PHP 5.3 及更高版本的代码 <strong>必须</strong> 使用正式的命名空间。</p><p>例如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// PHP 5.3 and later:</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PHP 5.2 及更低版本 <strong>应该</strong> 使用伪命名空间，约定俗成，以顶级组织名称 <code>Vendor_</code> 为类名前缀：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// PHP 5.2.x and earlier:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vendor_Model_Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-类的常量、属性和方法"><a href="#4-类的常量、属性和方法" class="headerlink" title="4. 类的常量、属性和方法"></a>4. 类的常量、属性和方法</h3><p>此处的「类」指代所有的类、接口以及可复用代码块（traits）</p><h4 id="4-1-常量"><a href="#4-1-常量" class="headerlink" title="4.1. 常量"></a>4.1. 常量</h4><p>类的常量中所有字母都 <strong>必须</strong> 大写，词间以下划线分隔。例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> VERSION = <span class="string">'1.0'</span>;</span><br><span class="line">    <span class="keyword">const</span> DATE_APPROVED = <span class="string">'2012-06-01'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-属性"><a href="#4-2-属性" class="headerlink" title="4.2. 属性"></a>4.2. 属性</h4><p>类的属性命名 <strong>可以</strong> 遵循：</p><ul><li>大写开头的驼峰式 </li><li>小写开头的驼峰式</li><li>下划线分隔式 </li></ul><p>本规范不做强制要求，但无论遵循哪种命名方式，都 <strong>应该</strong> 在一定的范围内保持一致。这个范围可以是整个团队、整个包、整个类或整个方法。</p><h4 id="4-3-方法"><a href="#4-3-方法" class="headerlink" title="4.3. 方法"></a>4.3. 方法</h4><p>方法名称 <strong>必须</strong> 用小写开头的驼峰命名规范。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://gitee.com/GHong/blog/raw/master/picture/PRS1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;PHP标准建议&quot;&gt;&lt;a href=&quot;#PHP标准建议&quot; class=&quot;headerlink&quot; title=&quot;PHP标准建议&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.php-fig.org/psr/psr-1/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PHP标准建议&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;根据&lt;a href=&quot;https://www.php-fig.org/bylaws/psr-workflow&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PSR Workflow Bylaw&lt;/a&gt;，每个PSR都具有正在处理的状态。一旦提案通过了入口投票，它将在此处列为“草稿”。除非PSR标记为“已接受”，否则可能会发生变化。草稿可能会发生巨大变化，但审核只会有微小的变化。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://geehon.github.io/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://geehon.github.io/tags/PHP/"/>
    
      <category term="PSR" scheme="https://geehon.github.io/tags/PSR/"/>
    
      <category term="代码规范" scheme="https://geehon.github.io/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
</feed>
